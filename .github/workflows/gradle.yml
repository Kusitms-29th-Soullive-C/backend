# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: SoulliveC CI/CD

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      ## jdk setting
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      ## gradle caching
      - name: 🧁 Gradle Caching
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: 🧁 application.yml 파일을 생성 합니다.
        run: |
          cd ./src/main/resources
          touch ./application.yml
          echo "${{ secrets.PROPERTIES }}" > ./application.yml # github actions에서 설정한 값을 application.yml 파일에 쓰기
        shell: bash

      #Gradle을 사용하여 프로젝트를 빌드
      - name: 🧁 gradle build를 위한 권한을 부여합니다.
        run: chmod +x gradlew

      - name: 🧁 gradle build 중입니다.
        run: ./gradlew build
        shell: bash # ci는 여기까지

      ## Docker 이미지를 빌드하고 Docker Hub로 푸시
      - name: 🧁 docker image build 후 docker hub에 push합니다.
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build -f Dockerfile -t ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_IMAGE }} .
          docker push ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_IMAGE }}
      - name: 🍀 deploy.sh 파일을 EC2 development server로 전달
        uses: appleboy/scp-action@master
        with:
          username: ubuntu
          host: ${{ secrets.AWS_HOST }}
          key: ${{ secrets.AWS_KEY }}
          port: 22
          source: "./scripts/deploy.sh"
          target: "/home/ubuntu/"
      - name: 🍀 docker-compose.yml 파일을 EC2 development server로 전달
        uses: appleboy/scp-action@master
        with:
          username: ubuntu
          host: ${{ secrets.AWS_HOST }}
          key: ${{ secrets.AWS_KEY }}
          port: 22
          source: "./docker-compose.yml"
          target: "/home/ubuntu/"

      - name: 🧁 docker hub에서 pull 후 deploy합니다.
        uses: appleboy/ssh-action@master
        with:
          username: ubuntu
          host: ${{ secrets.AWS_HOST }}
          key: ${{ secrets.AWS_KEY }}
          script: |
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_IMAGE }}
            sudo docker rm -f $(docker ps -qa) #
            chmod 777 ./scripts/deploy.sh
            cp ./scripts/deploy.sh ./deploy.sh
            ./deploy.sh
            docker image prune -f
